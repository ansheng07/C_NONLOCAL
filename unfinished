









double inter (void)
{
  gsl_integration_workspace * w = gsl_integration_workspace_alloc (1000);
  
  double result, error;
  double expected = -4.0;
  int l=1;
  double mu = 1.0;
  double x=1.0
  gsl_function F;
  F.function = &f;
  F.params = &mu;
  F.params = &x;
  gsl_integration_qags (&F, 0, 1, 0, 1e-7, 1000,
                        w, &result, &error); 

  printf ("result          = % .18f\n", result);
  printf ("exact result    = % .18f\n", expected);
  printf ("estimated error = % .18f\n", error);
  printf ("actual error    = % .18f\n", result - expected);
  printf ("intervals       = %zu\n", w->size);

  gsl_integration_workspace_free (w);

  return 0;
}



std::complex < double >** non_local(double r_minus,double r_plus,int l,int n,int z,double Vr,double beta)
{
    double Vv1,Rv1,av1,Wd1,Rwd1,awd1,r_average,zz,c_n,c_m,c,part_a,part_b,exponent,kl,total;
    const   complex<double> i(0.0,1.0);    

    Vv1=50.0;
    Rv1=1.25;
    av1=0.25;
    Wd1=12.0;
    Rwd1=1.22;
    awd1=0.35;
    r_average=float(r_plus+r_minus)/2.0;

    Vnucl=V_potential(Vv1,r_average,n,z,Rv1,av1);
 
    Wsurf=Wd_potential(Wd1,r_average,n,z,Rwd1,awd1);
    part_c=Vnucl+i*Wsurf;

    zz=2.0*r_minus*r_plus/(beta*beta);

    c_n=2.0*pow(1.0i,l)*zz;
    c_m=sqrt(math.pi)*beta;
    c=c_n/c_m;

   
    if (abs(zz)<=700)
    {
         part_b=np.exp(-(r_minus**2.0+r_plus**2.0)/(beta**2.0));
     
         part_a=rr(l,zz);
         
         kl=2.0*(1.0j**(l))*zz*part_a;
         exponent=(r_plus**2.0+r_minus**2.0)/(beta**2.0);
         total=(1.0/(beta*math.pi**(1.0/2.0)))*(exp(-exponent))*kl; 
     }   
      
    else
    {
        
         total=(1.0/(beta*math.pi**(1.0/2.0)))*(exp(-((r_plus-r_minus)/(beta))**2.0));

     }
   
    return total*part_c;


}


std::complex < double >** rr(int l,double x)

{  
    const   complex<double> i(0.0,1.0);    
    std::complex < double > c;
    c=1.0/(2.0*pow(1.0*i,l))
 
    f=lambda mu: exp(x*mu)*sp.legendre(l)(mu)

    r=integrate.quad(f,-1.0,1.0)

    return c*r[0]

}
